" Vundle and bundles configuration
source ~/.dotfiles/vim/bundles.vim

" Powerline
" if it's setup go ahead and load powerline
if isdirectory("/usr/lib/python3/dist-packages/powerline/bindings/vim")
  python3 from powerline.vim import setup as powerline_setup
  python3 powerline_setup()
  python3 del powerline_setup
  set laststatus=2
endif


:syntax enable
:set background=dark
:set ruler
:set nomodeline
:set t_Co=256
:set showcmd
:let mapleader=","
:set visualbell

if !has('nvim')
:set pastetoggle=<leader>p
else
noremap <leader>p <NOP>

noremap <leader>t gt
endif

" Powerline stuffs
" let g:Powerline_symbols = 'fancy'

" For NEOVIM
:set mouse=h

:set nofoldenable

" handle the case where I keep typing :W on this crappy Mac keyboard
:command WQ wq
:command Wq wq
:command W w

let g:tagbar_type_puppet = {
  \ 'ctagstype': 'puppet',
  \ 'kinds': [
    \'c:class',
    \'s:site',
    \'n:node',  
    \'d:definition',
    \'r:resource',
    \'f:default'
  \]
\}

if $TERM == 'screen'
  set term=xterm
endif

set backupdir=~/tmp/vim//
set directory=~/tmp/vim//


nmap <silent> <c-n> :NERDTreeToggle<CR>
nmap <silent> <c-o> :FufFile **/<CR>
nmap <silent> <c-y> :tabnew<CR>
nnoremap <leader>. :CtrlPTag<cr>

"Tagbar
nmap <silent> <Leader>t :TagbarToggle<CR>
nmap <silent> <Leader>f :FufRenewCache<CR>

" Save workspace
nnoremap <leader>x :ToggleWorkspace<CR>

nnoremap <leader>G :Grepper -tool git  -grepprg git -C `git rev-parse --show-toplevel` grep -nI<cr>

" Turn on spell check for mail "
:autocmd FileType mail setlocal spell spelllang=en_us

" Title string stuff "
let &titlestring = hostname() . "[vim(" . expand("%:t") . ")]"

if &term == "screen"
  set t_ts=^[k
  set t_fs=^[\
endif

if &term == "screen" || &term == "xterm"
  set title
endif

" settings for ultisnips"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"
map <leader>u :UltiSnipsEdit<CR>

" puppet manifests "
au BufRead,BufNewFile *.pp   setfiletype puppet
:autocmd FileType puppet set shiftwidth=2
:autocmd FileType puppet set softtabstop=2
:autocmd FileType puppet set autoindent
:autocmd FileType puppet set smartindent
:autocmd FileType puppet set expandtab
:autocmd FileType puppet map <leader>r :call VimuxRunCommand("clear; rake")<CR>
:autocmd FileType puppet map <leader>k :w<CR>:Tabularize /=><CR>
:autocmd FileType puppet map <leader>l :w<CR>:!puppet-lint %<CR>

" lua syntax "
:autocmd FileType lua set shiftwidth=2
:autocmd FileType lua set softtabstop=2
:autocmd FileType lua set autoindent
:autocmd FileType lua set smartindent
:autocmd FileType lua set expandtab

" ruby syntax "
au BufRead,BufNewFile *.rb   setfiletype ruby
:autocmd FileType ruby set shiftwidth=2
:autocmd FileType ruby set softtabstop=2
:autocmd FileType ruby set autoindent
:autocmd FileType ruby set smartindent
:autocmd FileType ruby set expandtab
:autocmd FileType ruby map <leader>l :w<CR>:!ruby -c %<CR>

" ansible syntax"
:autocmd FileType ansible map <leader>l :w<CR>:!ansible-lint -x ANSIBLE0008 %<CR>

" yaml syntax "
au BufRead,BufNewFile *.yaml   setfiletype yaml
:autocmd FileType yaml set shiftwidth=2
:autocmd FileType yaml set softtabstop=2
:autocmd FileType yaml set autoindent
:autocmd FileType yaml set smartindent
:autocmd FileType yaml set expandtab

" logstash syntax "
:autocmd FileType logstash set shiftwidth=2
:autocmd FileType logstash set softtabstop=2
:autocmd FileType logstash set autoindent
:autocmd FileType logstash set smartindent
:autocmd FileType logstash set expandtab
:autocmd FileType logstash map <leader>k :w<CR>:Tabularize /=><CR>

" terraform syntax "
au BufRead,BufNewFile *.tf setlocal filetype=terraform
:autocmd FileType terraform set shiftwidth=2
:autocmd FileType terraform set softtabstop=2
:autocmd FileType terraform set autoindent
:autocmd FileType terraform set smartindent
:autocmd FileType terraform set expandtab
:autocmd FileType terraform map <leader>k :w<CR>:Tabularize /=<CR>


" golang syntax "
au BufRead,BufNewFile *.go set filetype=go
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>s <Plug>(go-implements)

" python syntax "
au BufRead,BufNewFile *.py   setfiletype python
:autocmd FileType python set shiftwidth=4
:autocmd FileType python set softtabstop=4
:autocmd FileType python set autoindent
:autocmd FileType python set smartindent

" cucumber files "
au Bufread,BufNewFile *.feature setfiletype cucumber
:autocmd FileType cucumber set shiftwidth=2
:autocmd FileType cucumber set softtabstop=2
:autocmd FileType cucumber set autoindent
:autocmd FileType cucumber set smartindent

" nagios/icinga files "
au Bufread,BufNewFile *.cfg setfiletype icinga
:autocmd FileType icinga set shiftwidth=2
:autocmd FileType icinga set softtabstop=2
:autocmd FileType icinga set autoindent
:autocmd FileType icinga set smartindent

" json files "
au Bufread,BufNewFile *.json setfiletype json
:autocmd FileType json set shiftwidth=2
:autocmd FileType json set softtabstop=2
:autocmd FileType json set autoindent
:autocmd FileType json set smartindent

" erlang files "
au BufRead,BufNewFile *.erl set filetype=erlang

" Markdown Files "
au BufRead,BufNewFile *.md   setfiletype markdown

" vimwiki stuff "
let g:vimwiki_list = [ {'path': '~/Documents/VimWiki/tech.wiki'}, {'path': '~/Documents/VimWiki/redislabs.wiki'} ]

au BufRead,BufNewFile *.wiki set filetype=vimwiki
:autocmd FileType vimwiki map <leader>d :VimwikiMakeDiaryNote<CR>

function! ToggleCalendar()
  execute ":Calendar"
  if exists("g:calendar_open")
    if g:calendar_open == 1
      execute "q"
      unlet g:calendar_open
    else
      g:calendar_open = 1
    end
  else
    let g:calendar_open = 1
  end
endfunction
:autocmd FileType vimwiki map <leader>c :call ToggleCalendar()<CR>
:autocmd FileType vimwiki map <leader>s :VimwikiSearch /
:autocmd FileType vimwiki map <leader>dg :VimwikiDiaryGenerateLinks<CR>
:autocmd FileType vimwiki map <leader>di :VimwikiDiaryIndex<CR>

" Turn off file caching for fuzzy file finder "
let g:fuf_help_cache_dir = ''
let g:fuf_tag_cache_dir = ''
let g:fuf_taggedfile_cache_dir = ''
